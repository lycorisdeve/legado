name: Sync Upstream Releases

permissions:
  contents: write

on:
  schedule:
    - cron: '0 3 * * *'  # ÊØèÂ§©Âåó‰∫¨Êó∂Èó¥ 11:00
  workflow_dispatch:

jobs:
  sync-releases:
    name: Sync all releases from gedoor/legado (with pagination)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout your fork
        uses: actions/checkout@v3

      - name: Install GitHub CLI & jq
        run: |
          sudo apt update
          sudo apt install -y gh jq

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GH_TOKEN }}" | gh auth login --with-token

      - name: Clone upstream repo and prepare workspace
        run: |
          gh repo clone gedoor/legado legado-upstream
          mkdir -p releases_download

      - name: Sync all upstream releases with pagination
        run: |
          upstream_repo="gedoor/legado"
          fork_repo="${{ github.repository }}"

          echo "Fetching all upstream releases with pagination..."
          page=1
          all_upstream_releases="[]"
          while :; do
            releases=$(gh api -H "Accept: application/vnd.github+json" "/repos/$upstream_repo/releases?per_page=100&page=$page")
            count=$(echo "$releases" | jq length)
            if [ "$count" -eq 0 ]; then
              break
            fi
            all_upstream_releases=$(jq -s 'add' <(echo "$all_upstream_releases") <(echo "$releases"))
            ((page++))
          done
          echo "$all_upstream_releases" > ../upstream_releases.json
          echo "Fetched all upstream releases."

          echo "Fetching all fork releases with pagination..."
          page=1
          all_fork_releases="[]"
          while :; do
            releases=$(gh api -H "Accept: application/vnd.github+json" "/repos/$fork_repo/releases?per_page=100&page=$page")
            count=$(echo "$releases" | jq length)
            if [ "$count" -eq 0 ]; then
              break
            fi
            all_fork_releases=$(jq -s 'add' <(echo "$all_fork_releases") <(echo "$releases"))
            ((page++))
          done
          echo "$all_fork_releases" > ../fork_releases.json
          echo "Fetched all fork releases."

          existing_tags=$(jq -r '.[].tag_name' ../fork_releases.json | tr '\n' ' ')
          echo "Fork already has tags: $existing_tags"

          jq -c '.[] | select(.draft == false)' ../upstream_releases.json | while read -r release; do
            tag=$(echo "$release" | jq -r '.tag_name')

            if echo "$existing_tags" | grep -qw "$tag"; then
              echo "‚úî Release $tag already exists in fork, skipping."
              continue
            fi

            title=$(echo "$release" | jq -r '.name')
            body=$(echo "$release" | jq -r '.body // ""')
            prerelease=$(echo "$release" | jq -r '.prerelease')

            download_dir="../releases_download/$tag"
            mkdir -p "$download_dir"

            echo "‚¨á Downloading assets for $tag..."
            gh release download "$tag" -R $upstream_repo -D "$download_dir"

            echo "üöÄ Creating release $tag in fork..."
            if [ "$prerelease" = "true" ]; then
              gh release create "$tag" "$download_dir"/* \
                -R "$fork_repo" \
                -t "$title" \
                -n "$body" \
                --prerelease
            else
              gh release create "$tag" "$download_dir"/* \
                -R "$fork_repo" \
                -t "$title" \
                -n "$body"
            fi

            echo "‚úÖ Synced release: $tag"
          done
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
